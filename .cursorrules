# Components & Naming

- Use Rails partials (_component.html.erb) for reusable UI components.
- Store UI components in app/views/components/.
- Use ViewComponent for complex components with logic.
- Use Tailwind for styling (avoid Bootstrap, Radix, or third-party UI kits).
- Keep them small, typed with interfaces.

# ActiveRecord & Database

- Use snake_case for table and field names.
- Keep all DB logic inside models (no raw SQL in controllers/views).
- Prefer scopes over direct ActiveRecord queries in controllers.
- Use foreign keys and indexes (add_foreign_key, add_index).
- Migrations: rails g migration AddFieldToTable field:type.
- Optimize query performance using Active Record's eager loading
- Implement database indexing and query optimization techniques
- Leverage Active Record as the ORM; avoid raw SQL queries unless necessary

# Icons

- Use Heroicons (heroicon_tag "icon-name") for inline SVGs.
- Store custom SVGs in app/assets/images/icons/.

# Flash & Notifications

- Use Rails flash for server-side notifications:
- Use Stimulus + toastify-js for client-side toast messages.

# Rails Structure

- Use RESTful routes (resources :users).
- Controllers should be skinny (business logic in models/services).
- Use Service Objects (app/services/) for complex logic.
- Background jobs in app/jobs/ (use Sidekiq if Redis is available).
- Environment variables in .env or credentials.yml.enc.

# API & Authentication

- Use Current.user to access to authenticated user.
- API endpoints under app/controllers/api/v1/.

# Type Safety & Syntax

- Enable strict mode in Ruby (# frozen_string_literal: true).
- Use strong parameters in controllers (params.require(:user).permit(:name, :email)).
- Avoid any-like behavior (e.g., OpenStruct).
- Use guard clauses instead of deep nesting

# File & Folder Names

- Controllers/models/helpers in snake_case (users_controller.rb).
- Views in kebab-case (app/views/users/index.html.erb).
- Stylesheets in app/assets/stylesheets/, using Tailwind utilities.

# Tailwind Usage

- Use Tailwind (mobile-first, dark mode with dark:(class)).

# Background Jobs

- Use solid_queue and ActiveJob for background task
- Use asynchronous jobs (via Active Job) for I/O-bound or long-running operations

# Caching

- Implement caching strategies (fragment caching, Russian Doll caching)

# AI

- Prefer `o3-mini` model with high reasoning effort for all AI calls.

# Misc

- Keep code short; commits semantic.
- Sensitive string keys have to be inserted in .env

# Gems

- ruby 3.4.2
- rails 8.0.1
- tailwind 4
- database PostgreSQL 16.7
- solid_cable
- solid_cache
- solid_queue
- google-cloud-text_to_speech
- propshaft
- taildwind
- daisyui
- hotwire
- turbo
- stimulus
- minitest
- selenium
- @hotwired/turbo-rails
- @rails/request.js

IMPORTANT:

- Run the command `bundle install` to install all the dependencies every time you added a gem to the Gemfile.
- Always add a short summary of changes to `CHANGES.md` file in markdown format at the end of every agent interaction.
- Always update the README.md file in markdown format at the end of every agent interaction if you think you modified important files.
