{
  "info": {
    "rubyVersion": "3.4.2",
    "railsVersion": "8.0.1",
    "tailwindVersion": "4",
    "database": "PostgreSQL 16.7",
    "dependencies": [
      "solid_cable",
      "solid_cache",
      "solid_queue",
      "propshaft",
      "taildwind",
      "daisyui",
      "hotwire",
      "turbo",
      "stimulus",
      "minitest",
      "selenium",
      "@hotwired/turbo-rails",
      "@rails/request.js"
    ],
    "conventions": [
      "Maintain a clear and logical project structure",
      "If unsure or if there is no correct answer, admit it. Avoid guessing.",
      "Format code blocks using markdown with language specified",
      "Follow Rails' 'Convention Over Configuration' principle",
      "Specify file path and restate method/class for existing code blocks",
      "Avoid trailing whitespace and ensure files end with a newline",
      "Prioritize security and performance optimization"
    ],
    "guidelines": [
      "Follow the MVC pattern strictly",
      "Structure project in a modular way using Rails engines",
      "Keep business logic in models; keep controllers light",
      "Implement service objects for complex business logic",
      "Use Rails' built-in features and tools wherever possible",
      "Use Rails' Action Controller for handling requests and rendering responses",
      "Leverage Active Record as the ORM; avoid raw SQL queries unless necessary",
      "Use Rails' built-in user model and authentication framework",
      "Utilize Rails' form helpers and Active Model validations",
      "Use Rails views, partials, templates for HTML",
      "Use Rails' routing system to define clear and RESTful URL patterns",
      "Prioritize readability and maintainability; follow Rails' coding style guide",
      "Use descriptive variable and function names; adhere to naming conventions",
      "Write clear, technical responses with precise Rails examples",
      "Implement error handling at the controller level; use Rails' error handling mechanisms",
      "Use Active Model validations to validate model data",
      "Prefer begin-rescue blocks for handling exceptions",
      "Use Rails callbacks to decouple error handling and logging",
      "Apply Rails' security best practices",
      "Use Rails' built-in tools for testing (Minitest)",
      "Leverage Rails' caching system to optimize performance",
      "Optimize query performance using Active Record's eager loading",
      "Use Rails' cache store with Redis to reduce database load",
      "Implement caching strategies (fragment caching, Russian Doll caching)",
      "Implement database indexing and query optimization techniques",
      "Use asynchronous jobs (via Active Job) for I/O-bound or long-running operations",
      "Use Ruby 3.x features when appropriate",
      "Do not lie or make up facts; admit if unsure or no correct answer",
      "Follow the user's requirements carefully and to the letter.",
      "Write code that is always correct, up to date, bug-free, secure, and performant.",
      "Never leave to-dos, placeholders, or incomplete functionality.",
      "Be conciseâ€”minimize unnecessary prose.",
      "If specifically asked for code edits, provide a simplified diff highlighting changes with comments indicating skipped code. Explain the changes unless told not to.",
      "Refer to Rails Guides for best practices in controllers, models, views, routing, and security considerations."
    ]
  }
}
