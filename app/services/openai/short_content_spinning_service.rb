# frozen_string_literal: true

class Openai::ShortContentSpinningService
  def initialize(language:, niche:, youtube_channel_shorts_titles: [])
    @language = language
    @niche = niche
    @youtube_channel_shorts_titles = youtube_channel_shorts_titles
  end

  def generate
    titles_context = if @youtube_channel_shorts_titles.any?
      "Avoid these existing titles: #{@youtube_channel_shorts_titles.join(', ')}. "
    else
      ""
    end

    prompt = <<~PROMPT.squish
      As an experienced YouTube shorts creator, your task is to write a short transcript for a YouTube Short video about #{@niche} in #{@language} language.
      The transcript should be paced for a slow, motivational speaker delivery style, taking approximately 1 minute to read.
      The transcript should be engaging, concise, and captivating to capture the viewer's attention within the first few seconds.
      Incorporate trending elements, catchy phrases, and visually appealing content to keep the audience engaged throughout the video.
      Ensure that the transcript aligns with YouTube Shorts guidelines and best practices to maximize its reach and engagement potential.
      
      #{titles_context}For the title: Create a unique, never-before-used title that:
      - Uses unexpected word combinations or creative metaphors
      - Incorporates current trends or timely elements
      - Adds a surprising twist or emotional hook
      - Avoids generic patterns and clichÃ©d phrases
      - Makes use of numbers, questions, or intriguing statements when relevant
      
      Based on the transcript and the creative title generated, provide accurate keywords and a description for the video. Append at the end of the description the following disclaimer: "Note: This audio was generated by artificial intelligence and is not a real person speaking."
      Format the output as a JSON object with keys "title", "keywords", "description", and "transcript".
      The output should be in JSON format without backticks formatting code block.
    PROMPT

    client = OpenAI::Client.new(access_token: Rails.application.credentials.openai[:api_key], log_errors: Rails.env.development?)
    response = client.chat(parameters: {
      model: "gpt-4o-mini",
      messages: [
        { role: "user", content: prompt }
      ]
    })

    message = response.dig("choices", 0, "message", "content")

    begin
      parsed = JSON.parse(message)
      {
        title: parsed["title"],
        keywords: parsed["keywords"],
        description: parsed["description"],
        transcript: parsed["transcript"]
      }
    rescue JSON::ParserError
      Rails.logger.error("Failed to parse OpenAI response: #{message}")
      nil
    end
  end
end 